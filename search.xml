<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JDispatcher-Android组件生命周期分发框架</title>
      <link href="2021/07/31/jdispatcher/"/>
      <url>2021/07/31/jdispatcher/</url>
      
        <content type="html"><![CDATA[<h1 id="JDispatcher"><a href="#JDispatcher" class="headerlink" title="JDispatcher"></a>JDispatcher</h1><p>Android 组件生命周期分发框架，适用于组件化，模块化，启动优化等场景</p><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210729184216.png" alt=""></p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ul><li>实现 Application 各个生命周期方法在所有需要的组件中分发</li><li>分发顺序支持多种规则<ul><li>优先级：优先级值越大越先被调用</li><li>依赖项：组件依赖的分发类先初始化</li><li>支持自动校正在优先级和依赖项两种规则交叉使用情况下的分发顺序</li></ul></li><li>分发维度支持多种规则<ul><li>在指定进程(所有进程，主进程，非主进程)中分发</li><li>在指定线程(主线程，空闲线程，工作线程)中分发，实现异步加载</li><li>支持通过非阻塞式异步通知机制实现异步加载与同步加载交叉使用的情况（todo）</li><li>手动延迟调用分发，实现延迟加载</li><li>通过 ContentProvider 实现在 Application 之前超前预加载（todo）</li><li>只在debug模式下分发，实现 DevTools、DoKit 等开发工具的初始化</li></ul></li><li>维度值采用对整型 or/and 的位操作完成多维度值的收集与识别，灵活且高效</li><li>支持初始化时批量传参，可用于多项目多环境的三方 sdk 的初始化，使环境配置更统一</li><li>通过注解打点，APT 增量收集分发类，降低耦合，可用于模块化，组件化场景</li><li>通过拦截 AGP 构建流程实现在编译期间对分发类的扫描和排序，提高运行时性能</li><li>AGP Transform 增量支持编译（todo）</li><li>通过 ASM 字节码插桩实现分发表和 Application  生命周期回调方法的自动注入，集成更高效</li><li>支持统计所有分发类的初始化时间，可用于启动优化的统计与排查</li></ul><h2 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h2><ul><li><p>jdispatcher-annotation</p><ul><li>模块类型：apply plugin: ‘java’</li><li>模块描述：声明编译时所需的注解类以及公共类等</li></ul></li><li><p>jdispatcher-compiler</p><ul><li>模块类型：apply plugin: ‘java’</li><li>模块描述：编译期(.java–.class阶段) 收集和处理整个工程中的Dispatch注解信息并通过 javapoet 生成辅助类文件 JDispatcher$$Group_hash.java </li></ul></li><li><p>jdispatcher-plugin</p><ul><li><p>模块类型：apply plugin: ‘groovy’</p></li><li><p>模块描述：编译期(.class–.dex阶段) 自定义Transform拦截AGP的构建过程，找到所有Dispatch并排序</p></li><li><p>模块主要工作：</p><ul><li>第一个：IDispatch 的分发流程<ul><li>扫描到所有 APT 生成的 JDispatcher$$Group_hash.java 文件</li><li>反射获取收集到的 Map&lt;String, DispatchItem&gt; atlas)</li><li>通过 atlas 集合收集到的 DispatchItem 实现对 IDispatch 对象的反射实例化</li><li>按照 DispatchItem 的排序规则完成排序操作</li><li>将排好序的 IDispatch 集合通过字节码插桩到 JDispatcher 中，运行时执行对所有 IDispatch 的分发操作</li></ul></li><li>第二个：Application 生命周期方法的自动注册流程<ul><li>通过调用方在gradle中配置的 Application 全类名，在自定义Transform中扫描到该类</li><li>JDispatcher 调用字节码注入到 onTerminate()</li><li>JDispatcher 调用字节码注入到 onConfigurationChanged(newConfig: Configuration)</li><li>JDispatcher 调用字节码注入到 onLowMemory()</li><li>JDispatcher 调用字节码注入到 onTrimMemory(level: Int)</li></ul></li></ul></li></ul></li><li><p>jdispatcher-api</p><ul><li>模块类型：apply plugin: ‘com.android.library’</li><li>模块描述：运行时用于整个框架的初始化，运行时分发等操作</li></ul></li></ul><h2 id="集成说明"><a href="#集成说明" class="headerlink" title="集成说明"></a>集成说明</h2><p><a href="https://jitpack.io/#jaydroid1024/JDispatcher" target="_blank" rel="noopener"><img src="https://jitpack.io/v/jaydroid1024/JDispatcher.svg" alt=""></a></p><pre class=" language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">//Step 1. Add the JitPack repository to your build file</span><span class="token comment" spellcheck="true">//buildscript &amp; allprojects</span>allprojects <span class="token punctuation">{</span>    repositories <span class="token punctuation">{</span>        <span class="token punctuation">...</span>        maven <span class="token punctuation">{</span> url <span class="token string">'https://jitpack.io'</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//dependencies</span>classpath <span class="token string">'com.github.jaydroid1024.JDispatcher:jdispatcher-plugin:$last_version'</span><span class="token comment" spellcheck="true">//Step 2. Add the dependency</span>implementation <span class="token string">'com.github.jaydroid1024.JDispatcher:jdispatcher-api:$last_version'</span>kapt <span class="token string">'com.github.jaydroid1024.JDispatcher:jdispatcher-compiler:$last_version'</span><span class="token comment" spellcheck="true">//Step 3. apply the plugin and config dispatcher</span>apply plugin<span class="token punctuation">:</span> <span class="token string">'jdispatcher'</span>dispatcher <span class="token punctuation">{</span>    appCanonicalName <span class="token operator">=</span> <span class="token string">"com.jay.android.App"</span>    buildIncremental <span class="token operator">=</span> <span class="token boolean">false</span>    buildDebug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> App <span class="token operator">:</span> <span class="token function">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//为分发类指定自定义参数，用于三方key的统一收口配置</span>        <span class="token keyword">val</span> dispatchExtraParam <span class="token operator">=</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        dispatchExtraParam<span class="token punctuation">[</span><span class="token string">"com.jay.android.jdispatcher.DispatcherAppDemo"</span><span class="token punctuation">]</span> <span class="token operator">=</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>BuildConfig<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span> <span class="token function">hashMapOf</span><span class="token punctuation">(</span>                <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1_debug"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2_debug"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token keyword">else</span> <span class="token function">hashMapOf</span><span class="token punctuation">(</span>                <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1_release"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2_release"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//自动分发</span>        JDispatcher<span class="token punctuation">.</span>instance            <span class="token punctuation">.</span><span class="token function">withDebugAble</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调试模式：打印更多日志，实时刷新等</span>            <span class="token punctuation">.</span><span class="token function">withDispatchExtraParam</span><span class="token punctuation">(</span>dispatchExtraParam<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//分发参数</span>            <span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// region如果在 app build.gradle 中配置了</span><span class="token comment" spellcheck="true">// dispatcher {appCanonicalName = "com.jay.android.App"}</span><span class="token comment" spellcheck="true">// 就不需要添加以下代码,dispatcher 插件会自动注入</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        JDispatcher<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span>newConfig<span class="token operator">:</span> Configuration<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span>newConfig<span class="token punctuation">)</span>        JDispatcher<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span>newConfig<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onLowMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onLowMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        JDispatcher<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">onLowMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onTrimMemory</span><span class="token punctuation">(</span>level<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTrimMemory</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span>        JDispatcher<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">onTrimMemory</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//endregion</span><span class="token punctuation">}</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//手动调用分发</span>JDispatcher<span class="token punctuation">.</span>instance    <span class="token punctuation">.</span><span class="token function">manualDispatch</span><span class="token punctuation">(</span><span class="token string">"com.jay.android.jdispatcher.DispatcherAppDemo"</span><span class="token punctuation">)</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//声明分发类</span><span class="token annotation builtin">@Dispatch</span><span class="token punctuation">(</span>priority <span class="token operator">=</span> Priority<span class="token punctuation">.</span>LOW_DEFAULT<span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">"DispatcherAppDemo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> DispatcherAppDemo extends DispatchTemplate <span class="token punctuation">{</span>    <span class="token annotation builtin">@Override</span>    <span class="token keyword">public</span> void <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation builtin">@NotNull</span> Application app<span class="token punctuation">,</span> <span class="token annotation builtin">@NotNull</span> DispatchItem dispatchItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Jay"</span><span class="token punctuation">,</span> <span class="token string">"DispatcherAppDemo#onCreate"</span> <span class="token operator">+</span> dispatchItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Override</span>    <span class="token keyword">public</span> void <span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span><span class="token annotation builtin">@NotNull</span> Configuration newConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Jay"</span><span class="token punctuation">,</span> <span class="token string">"DispatcherAppDemo#onConfigurationChanged"</span> <span class="token operator">+</span> newConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Override</span>    <span class="token keyword">public</span> void <span class="token function">onLowMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Jay"</span><span class="token punctuation">,</span> <span class="token string">"DispatcherAppDemo#onLowMemory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Override</span>    <span class="token keyword">public</span> void <span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Jay"</span><span class="token punctuation">,</span> <span class="token string">"DispatcherAppDemo#onTerminate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Override</span>    <span class="token keyword">public</span> void <span class="token function">onTrimMemory</span><span class="token punctuation">(</span>int level<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Jay"</span><span class="token punctuation">,</span> <span class="token string">"DispatcherAppDemo#onTrimMemory"</span> <span class="token operator">+</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-groovy"><code class="language-groovy">#Jdispatcher 混淆配置<span class="token operator">-</span>keep <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>jay<span class="token punctuation">.</span>android<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span></span><span class="token operator">**</span><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">-</span>keep <span class="token keyword">class</span> <span class="token operator">*</span> <span class="token keyword">implements</span> <span class="token class-name">com<span class="token punctuation">.</span>jay<span class="token punctuation">.</span>android<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span>common<span class="token punctuation">.</span>IDispatch</span><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><ul><li><p>支持通过非阻塞式异步通知机制实现异步加载与同步加载交叉使用的情况</p></li><li><p>通过 ContentProvider 实现在 Application 之前超前预加载</p></li><li><p>AGP Transform 增量支持编译</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://github.com/alibaba/ARouter/blob/master/README_CN.md" target="_blank" rel="noopener">ARouter</a> 是一个用于帮助 Android App 进行组件化改造的框架 —— 支持模块间的路由、通信、解耦</p></li><li><p><a href="https://github.com/bingoogolapple/AppInit" target="_blank" rel="noopener">AppInit</a> 是一款 Android 应用初始化框架，基于组件化的设计思路，功能灵活，使用简单。</p></li><li><p><a href="https://github.com/meituan/WMRouter" target="_blank" rel="noopener"><em>WMRouter</em></a> 是一款Android路由框架，基于组件化的设计思路，有功能灵活、使用简单的特点</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 组件化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/05/04/hello-world/"/>
      <url>2020/05/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hello </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H </tag>
            
            <tag> W </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
