<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JDispatcher-Android组件生命周期分发框架</title>
      <link href="2021/07/31/jdispatcher/"/>
      <url>2021/07/31/jdispatcher/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png" alt=""></p><h1 id="JDispatcher"><a href="#JDispatcher" class="headerlink" title="JDispatcher"></a>JDispatcher</h1><p>Android 组件生命周期分发框架，适用于组件化，模块化，启动优化等场景</p><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210729184216.png" alt=""></p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ul><li>实现 Application 各个生命周期方法在所有需要的组件中分发</li><li>分发顺序支持多种规则<ul><li>优先级：优先级值越大越先被调用</li><li>依赖项：组件依赖的分发类先初始化</li><li>支持自动校正在优先级和依赖项两种规则交叉使用情况下的分发顺序</li></ul></li><li>分发维度支持多种规则<ul><li>在指定进程(所有进程，主进程，非主进程)中分发</li><li>在指定线程(主线程，空闲线程，工作线程)中分发，实现异步加载</li><li>支持通过非阻塞式异步通知机制实现异步加载与同步加载交叉使用的情况（todo）</li><li>手动延迟调用分发，实现延迟加载</li><li>通过 ContentProvider 实现在 Application 之前超前预加载（todo）</li><li>只在debug模式下分发，实现 DevTools、DoKit 等开发工具的初始化</li></ul></li><li>维度值采用对整型 or/and 的位操作完成多维度值的收集与识别，灵活且高效</li><li>支持初始化时批量传参，可用于多项目多环境的三方 sdk 的初始化，使环境配置更统一</li><li>通过注解打点，APT 增量收集分发类，降低耦合，可用于模块化，组件化场景</li><li>通过拦截 AGP 构建流程实现在编译期间对分发类的扫描和排序，提高运行时性能</li><li>AGP Transform 增量支持编译（todo）</li><li>通过 ASM 字节码插桩实现分发表和 Application  生命周期回调方法的自动注入，集成更高效</li><li>支持统计所有分发类的初始化时间，可用于启动优化的统计与排查</li></ul><h2 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h2><ul><li><p>jdispatcher-annotation</p><ul><li>模块类型：apply plugin: ‘java’</li><li>模块描述：声明编译时所需的注解类以及公共类等</li></ul></li><li><p>jdispatcher-compiler</p><ul><li>模块类型：apply plugin: ‘java’</li><li>模块描述：编译期(.java–.class阶段) 收集和处理整个工程中的Dispatch注解信息并通过 javapoet 生成辅助类文件 JDispatcher$$Group_hash.java </li></ul></li><li><p>jdispatcher-plugin</p><ul><li><p>模块类型：apply plugin: ‘groovy’</p></li><li><p>模块描述：编译期(.class–.dex阶段) 自定义Transform拦截AGP的构建过程，找到所有Dispatch并排序</p></li><li><p>模块主要工作：</p><ul><li>第一个：IDispatch 的分发流程<ul><li>扫描到所有 APT 生成的 JDispatcher$$Group_hash.java 文件</li><li>反射获取收集到的 Map&lt;String, DispatchItem&gt; atlas)</li><li>通过 atlas 集合收集到的 DispatchItem 实现对 IDispatch 对象的反射实例化</li><li>按照 DispatchItem 的排序规则完成排序操作</li><li>将排好序的 IDispatch 集合通过字节码插桩到 JDispatcher 中，运行时执行对所有 IDispatch 的分发操作</li></ul></li><li>第二个：Application 生命周期方法的自动注册流程<ul><li>通过调用方在gradle中配置的 Application 全类名，在自定义Transform中扫描到该类</li><li>JDispatcher 调用字节码注入到 onTerminate()</li><li>JDispatcher 调用字节码注入到 onConfigurationChanged(newConfig: Configuration)</li><li>JDispatcher 调用字节码注入到 onLowMemory()</li><li>JDispatcher 调用字节码注入到 onTrimMemory(level: Int)</li></ul></li></ul></li></ul></li><li><p>jdispatcher-api</p><ul><li>模块类型：apply plugin: ‘com.android.library’</li><li>模块描述：运行时用于整个框架的初始化，运行时分发等操作</li></ul></li></ul><h2 id="集成说明"><a href="#集成说明" class="headerlink" title="集成说明"></a>集成说明</h2><p><a href="https://jitpack.io/#jaydroid1024/JDispatcher" target="_blank" rel="noopener"><img src="https://jitpack.io/v/jaydroid1024/JDispatcher.svg" alt=""></a></p><pre class=" language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">//Step 1. Add the JitPack repository to your build file</span><span class="token comment" spellcheck="true">//buildscript &amp; allprojects</span>allprojects <span class="token punctuation">{</span>    repositories <span class="token punctuation">{</span>        <span class="token punctuation">...</span>        maven <span class="token punctuation">{</span> url <span class="token string">'https://jitpack.io'</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//dependencies</span>classpath <span class="token string">'com.github.jaydroid1024.JDispatcher:jdispatcher-plugin:$last_version'</span><span class="token comment" spellcheck="true">//Step 2. Add the dependency</span>implementation <span class="token string">'com.github.jaydroid1024.JDispatcher:jdispatcher-api:$last_version'</span>kapt <span class="token string">'com.github.jaydroid1024.JDispatcher:jdispatcher-compiler:$last_version'</span><span class="token comment" spellcheck="true">//Step 3. apply the plugin and config dispatcher</span>apply plugin<span class="token punctuation">:</span> <span class="token string">'jdispatcher'</span>dispatcher <span class="token punctuation">{</span>    appCanonicalName <span class="token operator">=</span> <span class="token string">"com.jay.android.App"</span>    buildIncremental <span class="token operator">=</span> <span class="token boolean">false</span>    buildDebug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> App <span class="token operator">:</span> <span class="token function">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//为分发类指定自定义参数，用于三方key的统一收口配置</span>        <span class="token keyword">val</span> dispatchExtraParam <span class="token operator">=</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        dispatchExtraParam<span class="token punctuation">[</span><span class="token string">"com.jay.android.jdispatcher.DispatcherAppDemo"</span><span class="token punctuation">]</span> <span class="token operator">=</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>BuildConfig<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span> <span class="token function">hashMapOf</span><span class="token punctuation">(</span>                <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1_debug"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2_debug"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token keyword">else</span> <span class="token function">hashMapOf</span><span class="token punctuation">(</span>                <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1_release"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2_release"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//自动分发</span>        JDispatcher<span class="token punctuation">.</span>instance            <span class="token punctuation">.</span><span class="token function">withDebugAble</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调试模式：打印更多日志，实时刷新等</span>            <span class="token punctuation">.</span><span class="token function">withDispatchExtraParam</span><span class="token punctuation">(</span>dispatchExtraParam<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//分发参数</span>            <span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// region如果在 app build.gradle 中配置了</span><span class="token comment" spellcheck="true">// dispatcher {appCanonicalName = "com.jay.android.App"}</span><span class="token comment" spellcheck="true">// 就不需要添加以下代码,dispatcher 插件会自动注入</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        JDispatcher<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span>newConfig<span class="token operator">:</span> Configuration<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span>newConfig<span class="token punctuation">)</span>        JDispatcher<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span>newConfig<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onLowMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onLowMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        JDispatcher<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">onLowMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onTrimMemory</span><span class="token punctuation">(</span>level<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTrimMemory</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span>        JDispatcher<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">onTrimMemory</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//endregion</span><span class="token punctuation">}</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//手动调用分发</span>JDispatcher<span class="token punctuation">.</span>instance    <span class="token punctuation">.</span><span class="token function">manualDispatch</span><span class="token punctuation">(</span><span class="token string">"com.jay.android.jdispatcher.DispatcherAppDemo"</span><span class="token punctuation">)</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//声明分发类</span><span class="token annotation builtin">@Dispatch</span><span class="token punctuation">(</span>priority <span class="token operator">=</span> Priority<span class="token punctuation">.</span>LOW_DEFAULT<span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">"DispatcherAppDemo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> DispatcherAppDemo extends DispatchTemplate <span class="token punctuation">{</span>    <span class="token annotation builtin">@Override</span>    <span class="token keyword">public</span> void <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation builtin">@NotNull</span> Application app<span class="token punctuation">,</span> <span class="token annotation builtin">@NotNull</span> DispatchItem dispatchItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Jay"</span><span class="token punctuation">,</span> <span class="token string">"DispatcherAppDemo#onCreate"</span> <span class="token operator">+</span> dispatchItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Override</span>    <span class="token keyword">public</span> void <span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span><span class="token annotation builtin">@NotNull</span> Configuration newConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Jay"</span><span class="token punctuation">,</span> <span class="token string">"DispatcherAppDemo#onConfigurationChanged"</span> <span class="token operator">+</span> newConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Override</span>    <span class="token keyword">public</span> void <span class="token function">onLowMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Jay"</span><span class="token punctuation">,</span> <span class="token string">"DispatcherAppDemo#onLowMemory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Override</span>    <span class="token keyword">public</span> void <span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Jay"</span><span class="token punctuation">,</span> <span class="token string">"DispatcherAppDemo#onTerminate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Override</span>    <span class="token keyword">public</span> void <span class="token function">onTrimMemory</span><span class="token punctuation">(</span>int level<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Jay"</span><span class="token punctuation">,</span> <span class="token string">"DispatcherAppDemo#onTrimMemory"</span> <span class="token operator">+</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-groovy"><code class="language-groovy">#Jdispatcher 混淆配置<span class="token operator">-</span>keep <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>jay<span class="token punctuation">.</span>android<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span></span><span class="token operator">**</span><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">-</span>keep <span class="token keyword">class</span> <span class="token operator">*</span> <span class="token keyword">implements</span> <span class="token class-name">com<span class="token punctuation">.</span>jay<span class="token punctuation">.</span>android<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span>common<span class="token punctuation">.</span>IDispatch</span><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><ul><li><p>支持通过非阻塞式异步通知机制实现异步加载与同步加载交叉使用的情况</p></li><li><p>通过 ContentProvider 实现在 Application 之前超前预加载</p></li><li><p>AGP Transform 增量支持编译</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://github.com/alibaba/ARouter/blob/master/README_CN.md" target="_blank" rel="noopener">ARouter</a> 是一个用于帮助 Android App 进行组件化改造的框架 —— 支持模块间的路由、通信、解耦</p></li><li><p><a href="https://github.com/bingoogolapple/AppInit" target="_blank" rel="noopener">AppInit</a> 是一款 Android 应用初始化框架，基于组件化的设计思路，功能灵活，使用简单。</p></li><li><p><a href="https://github.com/meituan/WMRouter" target="_blank" rel="noopener"><em>WMRouter</em></a> 是一款Android路由框架，基于组件化的设计思路，有功能灵活、使用简单的特点</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件化 </tag>
            
            <tag> 注解 </tag>
            
            <tag> Gradle Plugin </tag>
            
            <tag> ASM </tag>
            
            <tag> APT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>筑基系列-计算机基础知识小抄版</title>
      <link href="2021/05/31/computer-composition/"/>
      <url>2021/05/31/computer-composition/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png" alt=""></p><h1 id="筑基系列-计算机基础知识小抄版"><a href="#筑基系列-计算机基础知识小抄版" class="headerlink" title="筑基系列-计算机基础知识小抄版"></a>筑基系列-计算机基础知识小抄版</h1><p>计算机基础知识提纲挈领，包括发展史、CPU、总线、存储器、指令系统、控制器、运算器、位运算等</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>[1. 背景篇](#1. 背景篇)<ul><li><a href="#11-计算机发展史">1.1 计算机发展史</a></li><li><a href="#12-cpu发展史">1.2 CPU发展史</a></li><li><a href="#13-32-位-vs-64-位">1.3 32 位 VS 64 位</a></li><li><a href="#14-计算机的分类">1.4 计算机的分类</a></li><li><a href="#15-计算机的体系与结构">1.5 计算机的体系与结构</a></li><li><a href="#16-程序翻译与解释">1.6 程序翻译与解释</a></li><li><a href="#17-计算机的层次">1.7 计算机的层次</a></li><li><a href="#18-计算机的计算单位">1.8 计算机的计算单位</a></li><li><a href="#19-计算机的字符与编码集">1.9 计算机的字符与编码集</a></li></ul></li><li>[2. 组成篇](#2. 组成篇)<ul><li><a href="#21-计算机的总线">2.1 计算机的总线</a></li><li><a href="#22-计算机的输入输出设备">2.2 计算机的输入输出设备</a></li><li><a href="#23-计算机存储器">2.3 计算机存储器</a></li><li><a href="#24-主存储器与辅助存储器">2.4 主存储器与辅助存储器</a></li><li><a href="#25-高速缓存">2.5 高速缓存</a></li><li><a href="#26-计算机的指令系统">2.6 计算机的指令系统</a></li><li><a href="#27-计算机的控制器">2.7 计算机的控制器</a></li><li><a href="#28-计算机的运算器">2.8 计算机的运算器</a></li><li><a href="#29-计算机指令的执行过程">2.9 计算机指令的执行过程</a></li></ul></li><li>[3. 计算篇](#3. 计算篇)<ul><li><a href="#31-进制运算的基础">3.1 进制运算的基础</a></li><li><a href="#32-原码反码补码">3.2 原码&amp;反码&amp;补码</a></li><li><a href="#33-定点数与浮点数">3.3 定点数与浮点数</a></li><li><a href="#34-定点数的加减法运算">3.4 定点数的加减法运算</a></li><li><a href="#35-浮点数的加减法运算">3.5 浮点数的加减法运算</a></li><li><a href="#36-浮点数的乘除法运算">3.6 浮点数的乘除法运算</a></li></ul></li><li>[4. 关于我](#4. 关于我)</li><li>[5. 参考](#5. 参考)</li></ul><h2 id="1-背景篇"><a href="#1-背景篇" class="headerlink" title="1. 背景篇"></a>1. 背景篇</h2><h3 id="1-1-计算机发展史"><a href="#1-1-计算机发展史" class="headerlink" title="1.1 计算机发展史"></a>1.1 计算机发展史</h3><ul><li>电子管计算机 (1946-1957)<ul><li>埃尼阿克(ENIAC)</li></ul></li><li>晶体管计算机(1957-1964)<ul><li>贝尔实验室、MIT林肯实验室的TX-0、PDP-1配备4k内存和显示器</li></ul></li><li>集成电路计算机 (1964-1980)<ul><li>德州仪器的工程师发明了集成电路(IC)、IBM(7094,1401) 、System/360 操作系统</li></ul></li><li>超大规模集成电路计算机 (1980-现在)<ul><li>乔布斯 Apple 和 Apple二代</li></ul></li><li>未来的计算机 <ul><li>生物计算机</li><li>量子计算机</li></ul></li></ul><h3 id="1-2-CPU发展史"><a href="#1-2-CPU发展史" class="headerlink" title="1.2 CPU发展史"></a>1.2 CPU发展史</h3><ul><li>摩尔定律<ul><li>定义：当价格不变时，集成电路中可容纳的晶体管数目约每隔 18～24 个月就会增加一倍，性能也将提升一倍。</li><li>这一定律揭示了信息技术发展的速度，但到今天，摩尔定律失效了。因为随着芯片越来越小，在尺寸和散热等方面已经挑战了人类的极限，芯片中无法再放入更多的电子元件了。</li><li>所以计算能力又开始以另一种方式发展，那就是多核心，比如一个普普通通的 NVIDA 显卡中就拥有了几百个核心，这样就可以进行大量的并发计算；另外，一个分布式的大数据集群，里面就可能有上千个核心。</li></ul></li><li>单核CPU发展史<ul><li>（1971～ 1973） 500KHz频率的微型计算机（字长8位）</li><li>（1978～ 1985） 500MHz频率的微型计算机（字长16位）</li><li>（1985～ 2000） 高于1GHz频率的微型计算机（字长32位）</li><li>（1973～ 1978） 高于1MHz频率的微型计算机（字长8位）</li><li>（2000～ 现在） 高于2GHz频率的微型计算机（字长为64位）</li></ul></li><li>多核CPU发展史<ul><li>（2005） Intel奔腾系列双核CPU、 AMD速龙系列</li><li>（2006） Intel酷睿四核CPU</li><li>Intel酷睿系列十六核CPU</li><li>Intel至强系列五十六核CPU</li></ul></li><li>CPU数字能量是如何产生的<ul><li>时间是最重要的输入：晶振</li><li>电能供给给芯片，芯片中的一种电子元件晶振（也就是石英晶体）通电后产生震荡</li><li>震荡会产生频率稳定的脉冲信号，通常这是一种高频的脉冲信号，每秒可达百万次</li><li>然后通过谐振效应发放这个信号，形成方波</li><li>再通过电子元件调整这种脉冲的频率，把脉冲信号转换为需要的频率，这就形成了驱动芯片工作的时钟信号</li><li>最后，时钟信号驱动着芯片工作，就像人体的脉搏一样，每一次脉冲到来，都让芯片的状态发生一次变化，最终存储器中的指令被一行行执行</li></ul></li></ul><h3 id="1-3-32-位-VS-64-位"><a href="#1-3-32-位-VS-64-位" class="headerlink" title="1.3 32 位 VS 64 位"></a>1.3 32 位 VS 64 位</h3><ul><li>32、64 位可以表示操作系统、软件、 CPU等</li><li>32位的容量：2^32 = 4 × 2^30 = 4𝐺𝐵 </li><li>64位的容量：2^64 = 2^34 × 2^30 = 2^34𝐺𝐵=2^24T𝐵=2^14EB=2^4EB</li><li>如果是 CPU，那么有 32 位 CPU，也有 64 位 CPU<ul><li>如果 CPU 每次可以计算 4 个 byte，那么我们称作 32 位 CPU</li><li>如果 CPU 每次可以计算 8 个 byte，那么我们称作 64 位 CPU</li><li>这里的 32 和 64，称作 CPU 的位宽</li><li>64 位 CPU 可以执行更大数字的运算，这个优势在普通应用上不明显，但是对于数值计算较多的应用就非常明显。</li><li>64 位 CPU 可以寻址更大的内存空间</li></ul></li><li>如果 32 位/64 位说的是程序，那么说的是指令是 64 位还是 32 位的。<ul><li>32 位指令在 64 位机器上执行，困难不大，可以兼容。 </li><li>如果是 64 位指令，在 32 位机器上执行就困难了，32 位的寄存器都存不下指令的参数。</li></ul></li><li>如果 32 位/64 位说的是操作系统<ul><li>操作系统也是一种程序，如果是 64 位操作系统，也就是操作系统中程序的指令都是 64 位指令，因此不能安装在 32 位机器上。</li></ul></li></ul><h3 id="1-4-计算机的分类"><a href="#1-4-计算机的分类" class="headerlink" title="1.4 计算机的分类"></a>1.4 计算机的分类</h3><ul><li>超级计算机<ul><li>功能最强</li><li>运算速度的单位是TFlop/s（1TFlop/s=每秒一万亿次浮点计算）</li><li>Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz： 44.87 GFlop/s（  0.04487TFlop/s）</li><li>世界排名：Summit IBM（美国) &gt; 神威太湖之光(中国)  &gt; Sierra IBM（美国） </li><li>中国排名：神威 太湖之光 &gt; 天河二号&gt;  天河一号</li></ul></li><li>大型机 (又称大型机、大型主机、主机等)<ul><li>IBM Z9 </li><li>大型机造价高昂</li><li>去“IOE”行动 (I(IBM) O(Oracle) E(EMC)) –阿里云</li></ul></li><li>迷你计算机（服务器）<ul><li>普通服务器已经代替了传统的大型机，成为大规模企业计算的中枢</li></ul></li><li>工作站<ul><li>高端的通用微型计算机，提供比个人计算机更强大的性能</li><li>类似于普通台式电脑，体积较大，但性能强劲</li></ul></li><li>微型计算机<ul><li>麻雀虽小、五脏俱全</li><li>从构成的本质上来讲，个人计算机与前面的分类无异</li></ul></li></ul><h3 id="1-5-计算机的体系与结构"><a href="#1-5-计算机的体系与结构" class="headerlink" title="1.5 计算机的体系与结构"></a>1.5 计算机的体系与结构</h3><ul><li><p>阿兰.图灵</p><ul><li>英国(1912-1954) 数学家成逻辑学家网密肯进分析家和理论生物学家，被誉为计算机科学和人工智能之父。</li><li>图灵机</li><li>图灵测试</li><li>图灵完备</li><li>可判定性</li></ul></li><li><p>图灵机</p><ul><li><p>图灵机拥有一条无限长的纸带，纸带上是一个格子挨着一个格子，格子中可以写字符，你可以把纸带看作内存，而这些字符可以看作是内存中的数据或者程序。</p></li><li><p>图灵机有一个读写头，读写头可以读取任意格子上的字符，也可以改写任意格子的字符。</p></li><li><p>读写头上面的盒子里是一些精密的零件，包括图灵机的存储、控制单元和运算单元。</p></li><li><p>图灵通过数学证明了，一个问题如果可以拆解成图灵机的可执行步骤，那问题就是可计算的。</p></li><li><p>另一方面，图灵机定义了计算机的组成以及工作原理，但是没有给出具体的实现。</p></li></ul></li><li><p>冯诺依曼体系</p><ul><li><p>将程序指令和数据一起存储的计算机设计概念结构,现代计算机都是冯诺依曼机</p></li><li><p>能够长期记忆程序、数据、中间结果及最终运算结果的能力</p></li><li><p>能够把需要的程序和数据送至计算机中</p></li><li><p>能够具备算术、逻辑运算和数据传送等数据加工处理的能力</p></li><li><p>能够按照要求将处理结果输出给用户</p></li><li><p>冯诺依曼瓶颈：CPU和存储器速率之间的问题无法调和导致CPU经常空转等待数据传输</p></li></ul></li><li><p>冯诺依曼机组成结构</p><ul><li>输入设备<ul><li>鼠标、键盘</li></ul></li><li>输出设备<ul><li>显示器</li></ul></li><li>存储器<ul><li>CPU、内存、硬盘</li></ul></li><li>控制器<ul><li>CPU</li></ul></li><li>运算器<ul><li>CPU</li></ul></li></ul></li></ul><h3 id="1-6-程序翻译与解释"><a href="#1-6-程序翻译与解释" class="headerlink" title="1.6 程序翻译与解释"></a>1.6 程序翻译与解释</h3><ul><li><p>人类语言与计算机语言需要进行语言之间的转换</p></li><li><p>程序翻译</p><ul><li><p>L1是描述程序逻辑的高级语言</p></li><li><p>L0是计算机实际执行的低级语言</p></li><li><p>编译器：高级语言对应的编译器</p></li><li><p>程序翻译就是编译器将L1语言翻译并生成L0语言</p></li><li><p>翻译过程生成新的L0程序</p></li><li><p>通过编译器执行的相关语言</p><ul><li>C/C++</li><li>Object-C</li><li>Go</li></ul></li></ul></li><li><p>程序解释</p><ul><li><p>L1是描述程序逻辑的高级语言</p></li><li><p>L0是计算机实际执行的低级语言</p></li><li><p>解释器：使用L0语言实现的程序</p></li><li><p>程序解释的过程就是解释器将L1语言解释为L0语言</p></li><li><p>解释过程不生成新的L0程序</p></li><li><p>相关语言</p><ul><li>Python</li><li>Php</li><li>Javascript</li></ul></li></ul></li><li><p>混合型语言 </p><ul><li>Java （java程序翻译成字节码， 字节码解释成机器码）</li><li>C#</li></ul></li></ul><h3 id="1-7-计算机的层次"><a href="#1-7-计算机的层次" class="headerlink" title="1.7 计算机的层次"></a>1.7 计算机的层次</h3><ul><li>硬件逻辑层<ul><li>门、触发器等逻辑电路组成</li><li>属于电子工程的领域</li></ul></li><li>微程序机器层<ul><li>编程语言是微指令集</li><li>微指令所组成的微程序直接交由硬件执行</li><li>一般是硬件厂商公司处理该层</li></ul></li><li>传统机器层<ul><li>编程语言是CPU指令集（机器指令）</li><li>一条机器指令对应一个微程序，一个微程序对应一组微指令</li><li>编程语言和硬件是直接相关</li><li>不同架构的CPU使用不同的CPU指令集 （英特尔、AMD、x86/X86_64）</li></ul></li><li>操作系统层<ul><li>向上提供了简易的操作界面</li><li>向下对接了指令系统，管理硬件资源</li><li>操作系统层是在软件和硬件之间的适配层</li></ul></li><li>汇编语言层<ul><li>编程语言是汇编语言（PUSH DS/PUSH DS）</li><li>汇编语言可以翻译成可直接执行的机器语言</li><li>完成翻译的过程的程序就是汇编器</li></ul></li><li>高级语言层<ul><li>高级语言的类别非常多，由几百种</li><li>常见的高级语言有： Python、 Java、 C/C++、 Golang等</li></ul></li><li>应用层<ul><li>满足计算机针对某种用途而专门设计</li><li>WPS、IDE</li></ul></li></ul><h3 id="1-8-计算机的计算单位"><a href="#1-8-计算机的计算单位" class="headerlink" title="1.8 计算机的计算单位"></a>1.8 计算机的计算单位</h3><ul><li><p>容量单位</p><ul><li><p>在物理层面，高低电平记录信息</p></li><li><p>理论上只认识0/1两种状态，0/1称为bit（比特位）</p></li><li><p>0/1能够表示的内容太少了，需要更大的容量表示方法</p></li><li><p>更大的容量单位：字节、千字节、兆字节、吉字节、太字节、拍字节、艾字节</p></li><li><p>为什么网上买的移动硬盘500G，格式化之后就只剩465G了？</p><ul><li>硬盘商一般用10进位标记容量 𝟓𝟎𝟎 ∗ 𝟏𝟎𝟎𝟎^3/𝟏𝟎𝟐𝟒^3约等于𝟒𝟔𝟓</li><li>厂商采用十进制更好沟通</li></ul></li></ul></li></ul><table><thead><tr><th align="center">容量单位</th><th align="center">bit</th><th align="center">Byte</th><th align="center">KB</th><th align="center">MB</th><th align="center">GB</th><th align="center">TB</th><th align="center">PB</th><th align="center">EB</th></tr></thead><tbody><tr><td align="center">名字</td><td align="center">比特位</td><td align="center">字节</td><td align="center">千字节（kilobyte）</td><td align="center">兆字节=百万字节（megabyte）</td><td align="center">吉字节=十亿字节（GigaByte）</td><td align="center">太字节=万亿字节(terabyte)</td><td align="center">拍字节=千万亿字节（petabyte）</td><td align="center">艾字节=2^60字节（ExaByte）</td></tr><tr><td align="center">换算</td><td align="center">-</td><td align="center">8bits</td><td align="center">1024B</td><td align="center">1024K</td><td align="center">1024M</td><td align="center">1024G</td><td align="center">1024T</td><td align="center">1024P</td></tr><tr><td align="center">常见设备</td><td align="center">门电路</td><td align="center"></td><td align="center">寄存器</td><td align="center">高速缓存</td><td align="center">内存/硬盘</td><td align="center">硬盘</td><td align="center">云硬盘</td><td align="center">数据仓库</td></tr></tbody></table><ul><li>速度单位<ul><li>网络速度<ul><li>100M带宽=100M/s</li><li>为什么电信拉的100M光纤，测试峰值速度只有12M每秒？<ul><li>网络常用单位为(Mbps) </li><li>bps(bits per second):每秒传送位数 </li><li>100M/s = 100Mbps = 100Mbit/s</li><li>100Mbit/s=(100/8)MB/s=12.5MB/s</li></ul></li></ul></li><li>计算速度<ul><li>CPU的速度一般体现为CPU的时钟频率</li><li>CPU的时钟频率的单位一般是赫兹Hz（hertz）</li><li>目前主流CPU的时钟频率都在2GHz以上</li><li>Hz其实就是秒分之，并不只是描述计算机领域所专有的单位</li><li>Hz它是每秒中的周期性变动重复次数的计量</li><li>在CPU中就表示高低电瓶在每秒中变化的次数，2GHz = 2*1000^3Hz = 每秒20亿次</li></ul></li></ul></li></ul><h3 id="1-9-计算机的字符与编码集"><a href="#1-9-计算机的字符与编码集" class="headerlink" title="1.9 计算机的字符与编码集"></a>1.9 计算机的字符与编码集</h3><ul><li><p>早期英美的ASCII码</p><ul><li><p>美国信息交换标准码（American Standard Code for Information Interchange）</p></li><li><p>使用7个bits就可以完全表示ASCII码</p></li><li><p>包含95个可打印字符，33个不可打印字符（包括控制字符）</p></li><li><p>很多应用或者国家中的符号都无法表示</p></li><li><p>无法表示数学符号：“÷ ≠ ≥ ≈ π”</p></li><li><p>𝟑𝟑 + 𝟗𝟓 = 𝟏𝟐𝟖 = 𝟐^7</p><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143402.jpg" alt=""></p></li></ul></li><li><p>Externed ASCII码</p><ul><li><p>第一次对ASCII码进行扩充， 7bits =&gt; 8bits</p></li><li><p>常见数学运算符</p></li><li><p>带音标的欧洲字符</p></li><li><p>其他常用符、表格符等</p><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143429.jpg" alt=""></p></li></ul></li><li><p>国际化</p><ul><li>欧洲、中亚、东亚、拉丁美洲国家的语言多样性</li><li>语言体系不一样，不以有限字符组合的语言</li><li>中国、韩国、日本等的语言最为复杂</li><li>中文编码集<ul><li>GB2312<ul><li>《信息交换用汉字编码字符集——基本集》</li><li>一共收录了 7445 个字符</li><li>包括 6763 个汉字和 682 个其它符号</li><li>不兼容国际标准</li></ul></li><li>GBK<ul><li>向下兼容GB2312，向上支持国际ISO标准</li><li>《汉字内码扩展规范》</li><li>收录了21003个汉字，支持全部中日韩汉字</li><li>国际电脑不安装GBK编码就会显示乱码</li><li>国内的Windows系统默认使用GBK编码</li></ul></li></ul></li><li>Unicode<ul><li>Unicode：统一码、万国码、单一码，兼容全球的字符集</li><li>Unicode定义了世界通用的符号集， UTF-*实现了编码</li><li>UTF-8以字节为单位对Unicode进行编码</li></ul></li></ul></li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="2-组成篇"><a href="#2-组成篇" class="headerlink" title="2. 组成篇"></a>2. 组成篇</h2><h3 id="2-1-计算机的总线"><a href="#2-1-计算机的总线" class="headerlink" title="2.1 计算机的总线"></a>2.1 计算机的总线</h3><ul><li><p>总线的概述</p><ul><li><p>USB = Universal Serial Bus ，通用串行总线</p><ul><li>提供了对外连接的接口</li><li>不同设备可以通过USB接口进行连接</li><li>连接的标准，促使外围设备接口的统一</li></ul></li><li><p>总线的分类</p><ul><li>片内总线<ul><li>芯片内部的总线</li><li>寄存器与寄存器之间</li><li>寄存器与控制器、运算器之间</li></ul></li><li>系统总线<ul><li>CPU、主内存、 IO设备、各组件之间的信息传输线</li><li>数据总线<ul><li>双向传输各个部件的数据信息</li><li>一般与CPU位数相同（32位、 64位）</li><li>数据总线的位数（总线宽度）是数据总线的重要参数，64位总线一次可传输8个字节的数据</li></ul></li><li>地址总线<ul><li>指定源数据或目的数据在内存中的地址</li><li>地址总线位数=n，寻址范围： 0~𝟐^n</li><li>地址总线的位数与存储单元有关</li></ul></li><li>控制总线<ul><li>控制总线是用来发出各种控制信号的传输线</li><li>控制信号经由控制总线从一个组件发给另外一个组件</li><li>控制总线可以监视不同组件之间的状态（就绪/未就绪）</li></ul></li></ul></li></ul></li></ul></li><li><p>总线的仲裁</p><ul><li>为了解决总线使用权的冲突问题</li><li>总线的仲裁的方法<ul><li>链式查询-串联<ul><li>所有设备都可想仲裁器发出使用权申请，仲裁器在分配使用权时是按照链式顺序逐个询问，轮到谁就是谁</li><li>好处：电路复杂度低，仲裁方式简单</li><li>坏处：优先级低的设备难以获得总线使用权</li><li>坏处：优先级低的设备难以获得总线使用权</li></ul></li><li>计时器定时查询-并联<ul><li>仲裁控制器对设备编号并使用计数器累计计数</li><li>接收到仲裁信号后，往所有设备同时发出计数值</li><li>计数值与设备编号一致则获得总线使用权</li></ul></li><li>独立请求-循环<ul><li>每个设备均有总线独立连接仲裁器</li><li>设备可单独向仲裁器发送请求和接收请求</li><li>当同时收到多个请求信号，仲裁器有权按优先级分配使用权</li><li>好处：响应速度快，优先顺序可动态改变</li><li>好处：响应速度快，优先顺序可动态改变</li></ul></li></ul></li></ul></li></ul><h3 id="2-2-计算机的输入输出设备"><a href="#2-2-计算机的输入输出设备" class="headerlink" title="2.2 计算机的输入输出设备"></a>2.2 计算机的输入输出设备</h3><ul><li><p>常见输入输出设备</p><ul><li><p>输入设备</p><ul><li>字符输入设备<ul><li>键盘：<ul><li>薄膜键盘</li><li>机械键盘（根据段落感、声音、压力、键程的不同分为：黑轴、红轴、青轴、茶轴）</li><li>电容键盘</li></ul></li></ul></li><li>图像输入设备<ul><li>鼠标</li><li>数位板：常用于绘图设计创作，输入板和压感笔</li><li>扫描仪：将图形信息转换为数字信号</li></ul></li></ul></li><li><p>输出设备</p><ul><li>显示器<ul><li>CRT显示器</li><li>液晶显示器</li></ul></li><li>打印机</li><li>投影仪</li></ul></li></ul></li><li><p>输入输出接口的通用设计</p><ul><li>通用设计考虑的问题：读取数据、向设备发送数据、设备有没有被占用？、设备是否已经启动？、设备是否已经连接？</li><li>数据线<ul><li>是I/O设备与主机之间进行数据交换的传送线</li><li>单向传输数据线</li><li>双向传输数据线</li></ul></li><li>状态线<ul><li>IO设备状态向主机报告的信号线</li><li>查询设备是否已经正常连接并就绪</li><li>查询设备是否已经被占用</li></ul></li><li>命令线<ul><li>CPU向设备发送命令的信号线</li><li>发送读写信号</li><li>发送启动停止信号</li></ul></li><li>设备选择线<ul><li>主机选择I/O设备进行操作的信号线</li><li>对连在总线上的设备进行选择</li></ul></li></ul></li><li><p>CPU与IO设备的通信</p><ul><li><p>CPU速度与IO设备速度不一致</p></li><li><p>程序中断</p><ul><li><p>当外围IO设备就绪时，向CPU发出中断信号</p></li><li><p>CPU有专门的电路响应中断信号</p></li><li><p>中断的意义</p><ul><li>提供低速设备通知CPU的一种异步的方式</li><li>CPU可以高速运转同时兼顾低速设备的响应</li><li>提高工作效率(polling的问题) </li><li>故障恢复(异常处理、紧急事件等)</li><li>简化编程模型(try/cache, 计时器等)</li></ul></li></ul></li><li><p>例如通过电脑打印资料的过程</p><ul><li><p>中断相应过程</p><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143825.jpg" alt=""></p></li><li><p>中断请求类型</p><ul><li>硬件设备发给主板(打印机、键盘、鼠标等)</li><li>硬件中断: CPU异常(除以0), 时钟信号等</li><li>软件中断:发出(异常、切换到内核态等)</li></ul></li><li><p>中断向量表</p><ul><li><p>(一般在内存中) 一块块区域，存储了中断类型和中断响应程序的对应关系。每一行叫做一个中断向量。</p><table><thead><tr><th>中断类型</th><th>ISR地址</th><th>描述</th></tr></thead><tbody><tr><td>00</td><td>0x0000</td><td>除以0</td></tr><tr><td>01</td><td>0x0004</td><td>单步</td></tr><tr><td>09</td><td>0x0024</td><td>键盘</td></tr><tr><td>18</td><td>0x0048</td><td>打印机</td></tr><tr><td>100</td><td>0x0190</td><td>自定义</td></tr></tbody></table></li></ul></li><li><p>中断QA</p><ul><li>32位机器上的中断响应路径(ISR) 只有4个字节，怎么实现复杂的程序?</li><li>按键程序中断响应路径到操作系统再到应用， 但是到底哪些键被按了怎么知道?</li><li>中断响应后，如何恢复到中断执行前的状态?</li><li>既然出错了?为什么不出错了直接跳转到错误处理位置?</li></ul></li></ul></li><li><p>DMA（direct memory access）直接存储器存取</p><ul><li>DMA直接连接主存与IO设备</li><li>DMA直接连接主存与IO设备</li><li>当主存与IO设备交换信息时，不需要中断CPU</li><li>可以提高CPU的效率</li><li>硬盘和外置显卡中都有DMA设备</li></ul></li></ul></li></ul><h3 id="2-3-计算机存储器"><a href="#2-3-计算机存储器" class="headerlink" title="2.3 计算机存储器"></a>2.3 计算机存储器</h3><ul><li><p>存储器的分类</p><ul><li>按存储介质分类<ul><li>半导体存储器 ：内存条、 U盘、 固态硬盘</li><li>磁存储器：磁带、磁盘</li></ul></li><li>按存取方式分类<ul><li>随机存储器(RAM)： 随机读取 与位置无关</li><li>串行存储器 ：与位置有关 按顺序查找</li><li>只读存储器(ROM）：只读不写</li></ul></li></ul></li><li><p>存储器指标</p><ul><li>读写速度：7200转</li><li>存储容量：2T</li><li>价格：容量+价格=&gt;位价：每比特位价格</li></ul></li><li><p>层次结构</p><ul><li>高速缓存：速度快，位格高</li><li>主存：速度适中，位格适中</li><li>辅存：速度慢，位格低</li><li>缓存-主存层次<ul><li>原理：局部性原理</li><li>实现：在CPU与主存之间增加一层速度快（容量小）的Cache</li><li>目的：解决主存速度不足的问题</li></ul></li><li>主存-辅存层次<ul><li>原理：局部性原理</li><li>实现：主存之外增加辅助存储器（磁盘、 SD卡、 U盘等）</li><li>目的：解决主存容量不足的问题</li></ul></li><li>局部性原理<ul><li>局部性原理是指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。</li></ul></li></ul></li></ul><h3 id="2-4-主存储器与辅助存储器"><a href="#2-4-主存储器与辅助存储器" class="headerlink" title="2.4 主存储器与辅助存储器"></a>2.4 主存储器与辅助存储器</h3><ul><li><p>计算机断电，内存数据丢失</p></li><li><p>计算机断电，磁盘数据不会丢失</p></li><li><p>主存</p><ul><li>RAM（随机存取存储器： Random Access Memory）</li><li>RAM 通过电容存储数据，必须隔一段时间刷新一次</li><li>如果掉电，那么一段时间后将丢失所有数据</li><li>内存与CPU如何交互的</li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143858.jpg" alt=""></p><ul><li>32位系统：2^32 = 4 × 2^30 = 4𝐺𝐵 </li><li>64位系统：2^64 = 2^34 × 2^30 = 2^34𝐺𝐵=2^24T𝐵=2^14EB=2^4EB</li><li>32位的系统最大支持4GB的内存寻址范围，每一个字节都对应一个内存地址。内存地址由 0 开始编号，比如第 1 个地址是 0，第 2 个地址是 1， 然后自增排列，最后一个地址是内存中的字节数减 1。</li><li>工作原理<ul><li>字：是指存放在一个存储单元中的二进制代码组合</li><li>字块：存储在连续的存储单元中而被看作是一个单元的一组字</li><li>假设一个字有32位，一个字块共B个字，主存共M个字块<ul><li>B×M = 主存总字数；B×M×32 = 主存总容量(bits)</li></ul></li><li>字的地址包含两个部分，前m位指定字块的地址，后b位指定字在字块中的地址<ul><li>2^𝑚 = 𝑀 , 前m位能表示出的寻址范围是0–2^𝑚</li><li>2^𝒃 = 𝐵，后b位能表示出的寻址范围是0–2^b</li></ul></li></ul></li></ul></li><li><p>辅存：磁盘</p><ul><li><p>表面是可磁化的硬磁特性材料</p></li><li><p>移动磁头径向运动读取磁道信息</p></li><li><p>磁道、扇区、磁头位置、磁头方向</p></li><li><p>寻道调度算法</p><ul><li>先来先服务算法<ul><li>按顺序访问进程的磁道读写需求</li></ul></li><li>最短寻道时间优先<ul><li>与磁头当前位置有关</li><li>优先访问离磁头最近的磁道</li></ul></li><li>扫描算法（电梯算法）<ul><li>每次只往一个方向移动</li><li>到达一个方向需要服务的尽头再反方向移动</li></ul></li><li>循环扫描算法<ul><li>每次只往一个方向移动</li><li>一个方向到头后再从头开始从同一个方向开始移动</li></ul></li></ul></li></ul></li></ul><h3 id="2-5-高速缓存"><a href="#2-5-高速缓存" class="headerlink" title="2.5 高速缓存"></a>2.5 高速缓存</h3><ul><li><p>为了解决CPU与主存的速度不匹配的问题</p></li><li><p>缓存与主存的关系</p><ul><li>存储的逻辑结构类似</li><li>缓存的容量较小</li><li>缓存的速度更快</li></ul></li><li><p>在主存缓存层次结构中的工作原理</p><ul><li>CPU需要的数据在缓存里：直接获取</li><li>CPU需要的数据不在缓存里：需要去主存拿，替换策略<ul><li>需要性能良好的缓存替换策略</li></ul></li><li>命中率：从缓存取数据的命中率<ul><li>命中率是衡量缓存的重要性能指标</li><li>理论上CPU每次都能从高速缓存取数据的时候，命中率为1</li><li>访问主存次数： N𝑚，访问Cache次数： N𝑐</li><li>命中率ℎ =𝑁𝑐/(𝑁𝑐＋𝑁𝑚)</li></ul></li><li>访问效率： 𝑒<ul><li>访问主存时间： 𝑡𝑚 ，访问缓存时间：𝑡𝑐</li><li>访问Cache-主存系统平均时间： 𝑡𝑎 = ℎ×𝑡𝑐 + (1 − ℎ)×𝑡𝑚</li><li>𝑒 =𝑡𝑐/𝑡𝑎</li></ul></li></ul></li><li><p>高速缓存替换策略</p><ul><li>随机算法</li><li>先进先出算法(FIFO)<ul><li>把高速缓存看做是一个先进先出的队列</li><li>优先替换最先进入队列的字块</li></ul></li><li>最不经常使用算法(LFU)<ul><li>优先淘汰最不经常使用的字块</li><li>需要额外的空间记录字块的使用频率</li></ul></li><li>最近最少使用算法(LRU)<ul><li>优先淘汰一段时间内没有使用的字块</li><li>如果正在使用的字块在缓存就将其移到表头，保证链表头部节点是最近使用的</li><li>有多种实现方法，一般使用双向链表</li></ul></li></ul></li></ul><h3 id="2-6-计算机的指令系统"><a href="#2-6-计算机的指令系统" class="headerlink" title="2.6 计算机的指令系统"></a>2.6 计算机的指令系统</h3><ul><li><p>计算机指令</p><ul><li>计算机通过指令指挥计算机工作。</li><li>CPU被时钟驱动，不断的读取PC指针指向的指令，并增加PC指针，从内存中读取指令并执行。(如此周而复始)</li><li>不同的CPU架构使用不同指令。目前使用最广泛的是RISC(Reduced instruction set computer,精简指令集)</li></ul></li><li><p>机器指令的形式</p><ul><li>机器指令主要由两部分组成：操作码、地址码</li><li>操作码指明指令所要完成的操作</li><li>操作码的位数反映了机器的操作种类，如果操作码有8位就有2^8 = 256种操作</li><li>地址码直接给出操作数或者操作数的地址</li><li>分三地址指令、二地址指令和一地址指令与零地址指令<ul><li>零地址指令<ul><li>在机器指令中无地址码</li><li>空操作、停机操作、中断返回操作等</li></ul></li><li>一地址指令<ul><li>(addr1)OP→ (addr1)：自己对自己的操作</li><li>(addr1)OP(ACC) → (addr1)：自增操作</li></ul></li><li>二地址指令<ul><li>(addr1)OP(addr2) → (addr1)或(addr2)： 结果放在addr1或addr2)</li></ul></li><li>三地址指令<ul><li>一个操作码和三个地址码</li><li>(addr1)OP(addr2) → (addr3)：结果放在addr3， 例如： 1+2=3</li></ul></li></ul></li></ul></li><li><p>操作类型</p><ul><li>数据传输<ul><li>寄存器之间、寄存器与存储单元、存储单元之间传送</li><li>数据读写、交换地址数据、清零置一等操作</li></ul></li></ul></li><li><p>load/store指令用来从内存中读/写入内存。通常会有多个版本的实现，助记符是:</p><pre><code>- load类: Iw,Ib,Ih- store类: sw,sb,sh</code></pre><ul><li>算术逻辑<ul><li>操作数之间的加减乘除运算<ul><li>加减乘除等：addi, subi, divi, multi</li></ul></li><li>操作数的与或非等逻辑位运算<ul><li>位运算指令：and/or/xor</li></ul></li></ul></li></ul></li><li><p>移位操作</p><ul><li>数据左移（乘2）、数据右移（除2）</li><li>完成数据在算术逻辑单元的必要操作</li><li>控制指令<ul><li>等待指令、停机指令、空操作指令、中断指令等</li></ul></li></ul></li><li><p>寻址方式</p><ul><li><p>指令寻址</p><ul><li><p>顺序寻址</p></li><li><p>跳跃寻址</p><table><thead><tr><th align="center">地址</th><th align="center">指令</th></tr></thead><tbody><tr><td align="center">101</td><td align="center">MOV R0,R1</td></tr><tr><td align="center">102</td><td align="center">ADD R1,R2</td></tr><tr><td align="center">103</td><td align="center">JMP 102</td></tr></tbody></table></li></ul></li><li><p>数据寻址</p><ul><li>立即寻址<ul><li>指令直接获得操作数</li><li>无需访问存储器</li><li>优点：速度快</li><li>缺点：地址码位数限制操作数表示范围</li></ul></li><li>直接寻址<ul><li>直接给出操作数在主存的地址</li><li>寻找操作数简单，无需计算数据地址</li><li>优点：寻找操作数简单</li><li>缺点：地址码位数限制操作数表示范围</li></ul></li><li>间接寻址<ul><li>指令地址码给出的是操作数地址的地址</li><li>需要访问一次或多次主存来获取操作数</li><li>优点：操作数寻址范围大</li><li>缺点：速度较慢</li></ul></li></ul></li></ul></li></ul><h3 id="2-7-计算机的控制器"><a href="#2-7-计算机的控制器" class="headerlink" title="2.7 计算机的控制器"></a>2.7 计算机的控制器</h3><ul><li>控制器是协调和控制计算机运行的</li><li>程序计数器<ul><li>程序计数器用来存储下一条指令的地址</li><li>循环从程序计数器中拿出指令</li><li>当指令被拿出时，指向下一条指令</li></ul></li><li>时序发生器<ul><li>电气工程领域，用于发送时序脉冲</li><li>CPU依据不同的时序脉冲有节奏的进行工作</li></ul></li><li>指令译码器<ul><li>指令译码器是控制器的主要部件之一</li><li>计算机指令由操作码和地址码组成</li><li>翻译操作码对应的操作以及控制传输地址码对应的数据</li></ul></li><li>指令寄存器<ul><li>指令寄存器也是控制器的主要部件之一</li><li>从主存或高速缓存取计算机指令</li></ul></li><li>主存地址寄存器<ul><li>保存当前CPU正要访问的内存单元的地址</li></ul></li><li>主存数据寄存器<ul><li>保存当前CPU正要读或写的主存数据</li></ul></li><li>通用寄存器<ul><li>用于暂时存放或传送数据或指令</li><li>可保存ALU的运算中间结果</li><li>容量比一般专用寄存器要大</li></ul></li></ul><h3 id="2-8-计算机的运算器"><a href="#2-8-计算机的运算器" class="headerlink" title="2.8 计算机的运算器"></a>2.8 计算机的运算器</h3><ul><li><p>运算器是用来进行数据运算加工的</p></li><li><p>数据缓冲器</p><ul><li>分为输入缓冲和输出缓冲</li><li>输入缓冲暂时存放外设送过来的数据</li><li>输出缓冲暂时存放送往外设的数据</li></ul></li><li><p>ALU</p><ul><li>ALU：算术逻辑单元，是运算器的主要组成</li><li>常见的位运算（左右移、与或非等）</li><li>算术运算（加减乘除等）</li></ul></li><li><p>通用寄存器</p><ul><li>用于暂时存放或传送数据或指令</li><li>可保存ALU的运算中间结果</li><li>容量比一般专用寄存器要大</li></ul></li><li><p>状态字寄存器</p><ul><li>存放运算状态（条件码、进位、溢出、结果正负等）</li><li>存放运算控制信息（调试跟踪标记位、允许中断位等）</li></ul></li><li><p>总线</p></li></ul><h3 id="2-9-计算机指令的执行过程"><a href="#2-9-计算机指令的执行过程" class="headerlink" title="2.9 计算机指令的执行过程"></a>2.9 计算机指令的执行过程</h3><ul><li><p>指令执行过程</p><ul><li>取指令 <ul><li>从缓存取指令</li><li>送到指令寄存器</li></ul></li><li>分析指令<ul><li>指令译码器译码</li><li>发出控制信号</li><li>程序计数器+1</li></ul></li><li>执行指令<ul><li>装载数据到寄存器</li><li>ALU处理数据</li><li>记录运算状态</li><li>送出运算结果</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144002.jpg" alt=""></p></li><li><p>CPU的流水线设计</p><ul><li>提高CPU的综合利用率</li><li>类似工厂的装配线</li><li>工厂的装配线使得多个产品可以同时被加工</li><li>在同一个时刻，不同产品均位于不同的加工阶段</li><li>串行执行m条指令： 𝑇1 = 3t × 𝑚</li><li>流水线执行m条指令： 𝑇2 = 𝑡 × (𝑚 + 2)</li><li>流水线执行效率:H=𝑇2/𝑇1= 𝑡 × (𝑚 + 2)/3t × 𝑚=1/3+1/3m, m很大的情况下是串行执行的3倍效率</li></ul><table><thead><tr><th>指令</th><th>时间片</th><th>时间片</th><th>时间片</th><th>时间片</th><th>时间片</th></tr></thead><tbody><tr><td>1</td><td>取指令</td><td>分析指令</td><td>执行指令</td><td></td><td></td></tr><tr><td>2</td><td></td><td>取指令</td><td>分析指令</td><td>执行指令</td><td></td></tr><tr><td>3</td><td></td><td></td><td>取指令</td><td>分析指令</td><td>执行指令</td></tr></tbody></table></li></ul><h2 id="3-计算篇"><a href="#3-计算篇" class="headerlink" title="3. 计算篇"></a>3. 计算篇</h2><h3 id="3-1-进制运算的基础"><a href="#3-1-进制运算的基础" class="headerlink" title="3.1 进制运算的基础"></a>3.1 进制运算的基础</h3><ul><li>什么是进制<ul><li>进位制是一种记数方式，亦称进位计数法或位值计数法</li><li>有限种数字符号来表示无限的数值</li><li>使用的数字符号的数目称为这种进位制的基数或底数</li><li>计算机喜欢二进制，但是二进制表达太长了</li><li>使用大进制位可以解决这个问题</li><li>八进制、十六进制满足2的n次方的要求</li><li>二进制<ul><li>1024=0b1000000000 </li></ul></li><li>八进制<ul><li>1024=0o2000</li></ul></li><li>十进制： [0-9] </li><li>十六进制<ul><li>MAC地址：[0-9]和A、 B、 C、 D、 E、 F</li><li>1024=0x400</li></ul></li><li>二十进制<ul><li>玛雅文明的玛雅数字</li><li>因努伊特的因努伊特数字</li></ul></li><li>六十进制<ul><li>时间、坐标、角度等量化数据</li></ul></li></ul></li><li>进制的表示法<ul><li>正整数N，基数为r，位数为n</li><li>N=𝑑𝑛−1×r𝑛−1 +𝑑𝑛−2× r𝑛−2 + ⋯ + 𝑑1×𝑟 + 𝑑0</li><li>N= 1024  = 1 ×10^3 +0×10^3+ 2 × 10^1 + 4× 10^0</li><li>𝑁 = 10000000000  = 1 × 2^10</li></ul></li><li>二进制转十进制的方法<ul><li>按权展开法</li><li>𝑁 = 01100101 = 1 × 2^6 + 1 × 2^5 + 1 ×2^2 + 1 = 101</li><li>小数的按权展开法</li><li>𝑁 = 0.11001 = 1×2^−1 + 1×2^−2 + 1× 2^−5 = 0.78125=25/32</li></ul></li><li>十进制转二进制的方法<ul><li>（整数）重复相除法</li><li>重复除以2 ，得商， 取余数，最后一个余数为最高位</li><li>（小数）重复相乘法</li><li>重复乘以2， 得积 ，取1，第一个余数为最高位</li></ul></li></ul><h3 id="3-2-原码-amp-反码-amp-补码"><a href="#3-2-原码-amp-反码-amp-补码" class="headerlink" title="3.2 原码&amp;反码&amp;补码"></a>3.2 原码&amp;反码&amp;补码</h3><ul><li><p>使用0表示正数，使用1表示负数，最高位表示符号位，其它都是数字位</p></li><li><p>+237=011101101， -237=111101101</p></li><li><p>两个字节16位表示+237 【0】 0 0 0 0 0 0 0 1 1 1 0 1 1 0 1</p></li><li><p>原码表示法</p><ul><li>使用0表示正数、 1表示负数</li><li>规定符号位位于数值第一位</li><li>表达简单明了，是人类最容易理解的表示法</li><li>0有两种表示方法： 00、 10</li><li>原码进行运算非常复杂，特别是两个操作数符号不同的时候<ul><li>判断两个操作数绝对值大小</li><li>使用绝对值大的数减去绝对值小的数</li><li>对于符号值，以绝对值大的为准</li></ul></li><li>希望找到不同符号操作数更加简单的运算方法</li><li>希望找到使用正数代替负数的方法</li><li>使用加法操作代替减法操作，从而消除减法</li></ul></li><li><p>补码表示法</p><ul><li>整数的补码<ul><li>如果 x∈[0, 2^𝑛) X=x  ，n是数字位的个数</li><li>如果 x∈[−2^𝑛, 0) X=2^(𝑛+1) + 𝑥<ul><li>例如：n=4， x=13，计算x的二进制原码和补码<ul><li>原码： x=0,1101</li><li>补码： x=0,1101</li></ul></li><li>例如：n=4，x=-13，计算x的二进制原码和补码<ul><li>原码： x=1,1101</li><li>补码： 2^(𝑛+1) + 𝑥= 2^(4+1() − 13 = 100000 − 1101 = 10011</li></ul></li></ul></li></ul></li><li>小数的补码<ul><li>如果 x∈[0, 1) X=x  </li><li>如果 x∈[−1, 0) X=2+x</li><li>规律：小数的反码等于原码除符号位外按位取反，补码等于反码+1</li></ul></li><li>在计算补码的过程中，还是使用了减法</li><li>需要寻找使用正数代替负数的方法</li></ul></li><li><p>反码表示法</p><ul><li>反码的目的是找出原码和补码之间的规律，消除转换过程中的减法</li><li>如果 x∈[0, 2^𝑛) X=x  ，n是数字位的个数</li><li>如果 x∈[−2^𝑛, 0) X=（2^(𝑛+1)-1） + 𝑥</li><li>规律：负数的反码等于原码除符号位外按位取反，负数的补码等于反码+1<ul><li>-13， 原码：1,1101 ，反码：1,0011 ，补码：1,0010</li><li>-7， 原码： 1,0111，反码： 1,1001，补码： 1,1000</li><li>-1， 原码： 1,0001 ，反码：1,1111，补码： 1,1110</li></ul></li><li>x=-13，计算x的二进制原码和反码<ul><li>原码： x=1,1101</li><li>反码： (2𝑛+1−1) + 𝑥 = (2^4+1−1) − 13 = 011111 − 1101 = 1,0010</li><li>反码： x=1,0010</li></ul></li></ul></li></ul><p>  <img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144040.jpg" alt=""></p><h3 id="3-3-定点数与浮点数"><a href="#3-3-定点数与浮点数" class="headerlink" title="3.3 定点数与浮点数"></a>3.3 定点数与浮点数</h3><ul><li><p>定点数的表示方法</p><ul><li>小数点固定在某个位置的数称之为定点数</li><li>纯小数 ：符号位【小数点】数值位</li><li>纯整数：符号位 数值位 【小数点】</li><li>其它小数需要乘以比例因子以满足定点数保存格式，10.01 需要左移两位或者右移两位</li><li>计算机中的存储形式见下表，小数点不显示</li></ul><table><thead><tr><th align="left">数值</th><th align="center">符号位</th><th align="center">数值位</th></tr></thead><tbody><tr><td align="left">0.1011</td><td align="center">0</td><td align="center">1011</td></tr><tr><td align="left">-0.1011</td><td align="center">1</td><td align="center">1011</td></tr><tr><td align="left">1011</td><td align="center">0</td><td align="center">1011</td></tr><tr><td align="left">-1011</td><td align="center">1</td><td align="center">1011</td></tr></tbody></table></li><li><p>浮点数的表示方法</p><ul><li><p>计算机处理的很大程度上不是纯小数或纯整数</p></li><li><p>数据范围很大，定点数难以表达</p></li><li><p>浮点数的表示格式</p><ul><li>类比科学计数法：123450000000 = 1.2345 × 10^11 ， 1.2345：尾数 ，10：基数 ，11：阶码</li><li>𝑁 = 𝑆 × 𝑟^𝑗 ，S：尾数， r：基数， j：阶码</li><li>阶码符号位|阶码数值位|尾数符号位|尾数数值位</li><li>尾数规定使用纯小数</li><li>11.0101 = 0.110101 × 2^10</li><li>11.0101 = 0.0110101 × 2^11</li><li>计算机中的存储形式见下表，小数点不显示</li></ul><table><thead><tr><th>数字</th><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位（8位）</th></tr></thead><tbody><tr><td>0.110101 × 2^10</td><td>0</td><td>10</td><td>0</td><td>1010100</td></tr><tr><td>0.0110101 × 2^11</td><td>0</td><td>11</td><td>0</td><td>01101010</td></tr></tbody></table></li></ul></li></ul><ul><li><p>浮点数的表示范围</p><ul><li>假设阶码数值取m位，尾数数值取n位</li><li>阶码表示范围： [−(𝟐^𝒎 − 𝟏),  𝟐^𝒎 − 𝟏]</li><li>尾数表示范围： [−(𝟏 − 𝟐^−𝒏), −(𝟐^−𝒏)] [𝟐^−𝒏,  𝟏 − 𝟐−^𝒏]</li><li>单精度浮点数：使用4字节、 32位来表达浮点数(float)</li><li>双精度浮点数：使用8字节、 64位来表达浮点数(double)</li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144101.jpg" alt=""></p></li><li><p>浮点数的规格化</p><ul><li>尾数规定使用纯小数</li><li>尾数最高位必须是1</li><li>例如：11.0101 = 0.110101 × 2^10</li></ul></li></ul><ul><li><p>两者的对比</p><ul><li>当定点数与浮点数位数相同时， 浮点数表示的范围更大</li><li>当浮点数尾数为规格化数时， 浮点数的精度更高（尾数存8位，前面的0多了丢失的精度就更多）</li><li>浮点数运算包含阶码和尾数， 浮点数的运算更为复杂</li><li>浮点数在数的表示范围、精度、溢出处理、编程等方面均优于定点数</li><li>浮点数在数的运算规则、运算速度、硬件成本方面不如定点数</li></ul></li></ul><h3 id="3-4-定点数的加减法运算"><a href="#3-4-定点数的加减法运算" class="headerlink" title="3.4 定点数的加减法运算"></a>3.4 定点数的加减法运算</h3><ul><li><p>整数加法：A 补 + B 补 = 𝐴 + 𝐵 补 (𝑚𝑜𝑑2^(𝑛+1))</p></li><li><p>小数加法：A 补 + B 补 = 𝐴 + 𝐵 补 (𝑚𝑜𝑑2)</p></li><li><p>数值位与符号位一同运算，并将符号位产生的进位自然丢掉</p></li><li><p>整数减法：A 补 − B 补 = 𝐴 + (−𝐵) 补  (𝑚𝑜𝑑2^(𝑛+1))</p></li><li><p>小数减法：A 补 − B 补 = 𝐴 + (−𝐵) 补 (𝑚𝑜𝑑2)</p></li><li><p>-B[补]等于B[补]连同符号位按位取反，末位加一，B 补 = 1,0010101， (−B) 补 = 0,1101011</p></li><li><p>负数的反码等于原码按位取反，补码等于反码+1</p></li><li><p>例如： A=-110010， B=001101，求A+B</p><ul><li>A[补] = 1,001110</li><li>B 补 = B[原] = 0,001101</li><li>A 补 + B 补 = (A + B) 补 =1,011011</li><li>(A + B)原 = −100101</li></ul></li><li><p>例如：A=11001000， B=-00110100，求A-B</p><ul><li>A 补 = A[原] = 0,11001000</li><li>B 补 = 1,11001100</li><li>(−B) 补 = 0,00110100</li><li>A 补 − B 补 = A + (−B) 补=0,11111100</li><li>A − B（原） = 111111100</li></ul></li><li><p>双符号位判断溢出</p><ul><li>双符号位判断法<ul><li>单符号位表示变成双符号位： 0=&gt;00,1=&gt;11</li><li>双符号位产生的进位丢弃</li><li>结果的双符号位不同则表示溢出</li></ul></li></ul></li></ul><h3 id="3-5-浮点数的加减法运算"><a href="#3-5-浮点数的加减法运算" class="headerlink" title="3.5 浮点数的加减法运算"></a>3.5 浮点数的加减法运算</h3><ul><li><p>𝑥 = 𝑆𝑥 × 𝑟^𝑗𝑥，𝑥 = 0.1101 × 2^01</p></li><li><p>𝑦 = 𝑆𝑦 × 𝑟^𝑗y，𝑦 = (−0.1010) × 2^11</p></li><li><p>対阶</p><ul><li>対阶的目的是使得两个浮点数阶码一致，使得尾数可以进行运算</li><li>浮点数尾数运算简单</li><li>浮点数位数实际小数位与阶码有关</li><li>阶码按小阶看齐大阶的原则</li></ul><table><thead><tr><th>数字</th><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位（8位）</th></tr></thead><tbody><tr><td>0.1101 × 2^01</td><td>00</td><td>0001</td><td>00</td><td>1101</td></tr><tr><td>(−0.1010) × 2^11</td><td>00</td><td>0011</td><td>01</td><td>1010</td></tr></tbody></table><ul><li>対阶操作：将x的数值右移两位，𝑥 = 0.001101 × 2^11</li></ul><table><thead><tr><th>数字</th><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位（8位）</th></tr></thead><tbody><tr><td>0.001101 × 2^11</td><td>00</td><td><strong>0011</strong></td><td>00</td><td>0011(01)舍弃后两位</td></tr><tr><td>(−0.1010) × 2^11</td><td>00</td><td>0011</td><td>01</td><td>1010</td></tr></tbody></table></li><li><p>尾数求和</p><ul><li>使用补码进行运算</li><li>减法运算转化为加法运算： A - B = A + (-B)</li><li>𝑥[原] = 00.0011，𝑥[补] = 00.0011</li><li>𝑦[原] = 11.1010，𝑦[补] = 11.0110</li><li>S = (𝑥 + 𝑦)[补] = 11.1001</li></ul><table><thead><tr><th>数字</th><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位（8位）</th></tr></thead><tbody><tr><td>11.1001</td><td>00</td><td><strong>0011</strong></td><td>11</td><td>1001</td></tr></tbody></table></li><li><p>尾数规格化</p><ul><li>◆ 对补码进行规格化需要判断两种情况： S&gt;0和S&lt;0</li><li>S[补] = 00.1xxxxxx(𝑆 &gt; 0)</li><li>S[补] = 11.0xxxxxx(𝑆 &lt; 0)</li><li>如果不满足此格式，需要进行左移， 同时阶码相应变化，以满足规格化</li><li>S = (𝑥 + 𝑦)[补] = 11.1001，不满足约定格式</li><li>S = (𝑥 + 𝑦)[补] = 11. (1)0010(左移舍弃，阶码数值位也要相应变化)</li></ul><table><thead><tr><th>数字</th><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位（8位）</th></tr></thead><tbody><tr><td>11.0010</td><td>00</td><td>0010</td><td>11</td><td>0010</td></tr></tbody></table><ul><li>S = 𝑥 + 𝑦 补 = 11.0010，𝑥 + 𝑦 原 = −0.1110</li><li>𝑥 + 𝑦 = −0.1110× 2^10</li><li>一般情况下都是左移，符号位不一致下需要右移(定点运算的溢出情况)</li><li>右移的话则需要进行舍入操作</li></ul></li><li><p>舍入</p><ul><li>0舍1入” 法（二进制的四舍五入）</li><li>S 补 = 10.10110111，符号位不一致，右移舍弃尾数再+1， S 补 = 11.01011011(1)+1=11.01011100</li><li>右移阶码要+1</li></ul></li><li><p>溢出判断</p><ul><li>定点运算双符号位不一致为溢出</li><li>浮点运算尾数双符号位不一致不算溢出，因为尾数双符号位可以进行右规</li><li>浮点运算主要通过阶码的双符号位判断是否溢出</li><li>如果规格化后，阶码双符号位不一致，则认为是溢出</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144134.jpg" alt=""></p><h3 id="3-6-浮点数的乘除法运算"><a href="#3-6-浮点数的乘除法运算" class="headerlink" title="3.6 浮点数的乘除法运算"></a>3.6 浮点数的乘除法运算</h3><ul><li><p>乘法：阶码相加，尾数求积</p></li><li><p>𝑥 × 𝑦 = (𝑆𝑥 × 𝑆𝑦) × 𝑟^(𝑗𝑥+𝑗y)</p></li><li><p>除法：阶码相减，尾数求商</p></li><li><p>𝑥/𝑦 = (𝑆𝑥/𝑆𝑦) × 𝑟^(𝑗𝑥−𝑗y)</p></li><li><p>阶码运算</p></li><li><p>尾数运算</p></li><li><p>尾数规格化</p></li><li><p>舍入</p></li><li><p>溢出判断</p></li><li><p>例如： 𝑥 = 0.11010011 × 2^1101， 𝑦 = 0.11101110 × 2^0001，假设阶码4位，尾数8位，计算x * y</p><ul><li>𝑥 × 𝑦 = (𝑆𝑥 × 𝑆𝑦) ×^𝑟(𝑗𝑥+𝑗y)</li><li>= (0.11010011 × 0.11101110) × 𝑟^(1101+0001)</li><li>= 0.11000100(保留八位) × 𝑟^1110</li></ul></li></ul><h2 id="4-关于我"><a href="#4-关于我" class="headerlink" title="4. 关于我"></a>4. 关于我</h2><p>一个专注基础知识的十二线小码农，本着 <strong>基础，体系，实践，分享</strong> 的学习理念，在自我提升的同时分享自己的心得体会，不断完善，周而复始。</p><p><a href="http://basedev.cn/" target="_blank" rel="noopener">个人网站 basedev.cn</a>  </p><p><a href="https://github.com/jaydroid1024" target="_blank" rel="noopener">Github</a></p><p>BaseDev系列只整理点到为止的知识纲领，不求甚解；欲知其所以然者还得回归书本且付诸实践</p><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><ul><li><p><a href="https://kaiwu.lagou.com/course/courseInfo.htm?sid=20-h5Url-0&amp;courseId=478&amp;lagoufrom=noapp&amp;sharetype=wx_friend#/content" target="_blank" rel="noopener">重学操作系统 | 拉钩教育</a></p></li><li><p><a href="https://coding.imooc.com/class/package/355.html" target="_blank" rel="noopener">编程必备基础 | 慕课网</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 组成原理 </tag>
            
            <tag> CPU </tag>
            
            <tag> 存储器 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客框架使用简介</title>
      <link href="2018/09/07/hexo-intro/"/>
      <url>2018/09/07/hexo-intro/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png" alt=""></p><h1 id="Hexo-博客框架"><a href="#Hexo-博客框架" class="headerlink" title="Hexo 博客框架"></a>Hexo 博客框架</h1><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="1-主题：hexo-theme-matery"><a href="#1-主题：hexo-theme-matery" class="headerlink" title="1. 主题：hexo-theme-matery"></a>1. 主题：hexo-theme-matery</h2><p>matery 这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p><h3 id="1-1-特性"><a href="#1-1-特性" class="headerlink" title="1.1 特性"></a>1.1 特性</h3><ul><li><p>简单漂亮，文章内容美观易读</p></li><li><p><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</p></li><li><p>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</p></li><li><p>首页轮播文章及每天动态切换 <code>Banner</code> 图片</p></li><li><p>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</p></li><li><p>时间轴式的归档页</p></li><li><p><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</p></li><li><p>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</p></li><li><p>可自定义的数据的友情链接页面</p></li><li><p>支持文章置顶和文章打赏</p></li><li><p>支持 <code>MathJax</code></p></li><li><p><code>TOC</code> 目录</p></li><li><p>可设置复制文章内容时追加版权信息</p></li><li><p>可设置阅读文章时做密码验证</p></li><li><p><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</p></li><li><p>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</p></li><li><p>支持在首页的音乐播放和视频播放功能</p></li><li><p>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</p></li><li><p>支持 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a>、<a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能。</p></li></ul><h3 id="1-2-下载"><a href="#1-2-下载" class="headerlink" title="1.2 下载"></a>1.2 下载</h3><p>当你看到这里的时候，应该已经有一个自己的 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown</a> 来写博客和文章。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master" target="_blank" rel="noopener">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><h3 id="1-3-配置"><a href="#1-3-配置" class="headerlink" title="1.3 配置"></a>1.3 配置</h3><h4 id="1-3-1-切换主题"><a href="#1-3-1-切换主题" class="headerlink" title="1.3.1 切换主题"></a>1.3.1 切换主题</h4><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><p><code>_config.yml</code> 文件的其它修改建议:</p><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h4 id="1-3-2-新建分类-categories-页"><a href="#1-3-2-新建分类-categories-页" class="headerlink" title="1.3.2 新建分类 categories 页"></a>1.3.2 新建分类 categories 页</h4><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h4 id="1-3-3-新建标签-tags-页"><a href="#1-3-3-新建标签-tags-页" class="headerlink" title="1.3.3 新建标签 tags 页"></a>1.3.3 新建标签 tags 页</h4><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span></code></pre><h4 id="1-3-4-新建关于我-about-页"><a href="#1-3-4-新建关于我-about-页" class="headerlink" title="1.3.4 新建关于我 about 页"></a>1.3.4 新建关于我 about 页</h4><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span></code></pre><h4 id="1-3-5-新建留言板-contact-页（可选的）"><a href="#1-3-5-新建留言板-contact-页（可选的）" class="headerlink" title="1.3.5 新建留言板 contact 页（可选的）"></a>1.3.5 新建留言板 contact 页（可选的）</h4><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h4 id="1-3-6-新建友情链接-friends-页（可选的）"><a href="#1-3-6-新建友情链接-friends-页（可选的）" class="headerlink" title="1.3.6 新建友情链接 friends 页（可选的）"></a>1.3.6 新建友情链接 friends 页（可选的）</h4><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h4 id="1-3-7-新建-404-页"><a href="#1-3-7-新建-404-页" class="headerlink" title="1.3.7 新建 404 页"></a>1.3.7 新建 404 页</h4><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><p>编辑你刚刚新建的页面文件 <code>/source/404.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span></code></pre><h4 id="1-3-8-菜单导航配置"><a href="#1-3-8-菜单导航配置" class="headerlink" title="1.3.8 菜单导航配置"></a>1.3.8 菜单导航配置</h4><p>配置基本菜单导航的名称、路径url和图标icon.</p><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中查找   </p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book</code></pre><h4 id="1-3-9-二级菜单配置方法"><a href="#1-3-9-二级菜单配置方法" class="headerlink" title="1.3.9 二级菜单配置方法"></a>1.3.9 二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)<br>2.在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 <code>-</code>.<br>4.注意缩进格式  </p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Musics        <span class="token key atrule">url</span><span class="token punctuation">:</span> /musics        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h4 id="1-3-10-代码高亮"><a href="#1-3-10-代码高亮" class="headerlink" title="1.3.10 代码高亮"></a>1.3.10 代码高亮</h4><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  custom_css<span class="token punctuation">:</span></code></pre><h4 id="1-3-11-搜索"><a href="#1-3-11-搜索" class="headerlink" title="1.3.11 搜索"></a>1.3.11 搜索</h4><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h4 id="1-3-12-中文链接转拼音（建议安装）"><a href="#1-3-12-中文链接转拼音（建议安装）" class="headerlink" title="1.3.12 中文链接转拼音（建议安装）"></a>1.3.12 中文链接转拼音（建议安装）</h4><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h4 id="1-3-13-文章字数统计插件（建议安装）"><a href="#1-3-13-文章字数统计插件（建议安装）" class="headerlink" title="1.3.13 文章字数统计插件（建议安装）"></a>1.3.13 文章字数统计插件（建议安装）</h4><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读次数.</span></code></pre><h4 id="1-3-14-添加emoji表情支持（可选的）"><a href="#1-3-14-添加emoji表情支持（可选的）" class="headerlink" title="1.3.14 添加emoji表情支持（可选的）"></a>1.3.14 添加emoji表情支持（可选的）</h4><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span></code></pre><h4 id="1-3-15-添加-RSS-订阅支持（可选的）"><a href="#1-3-15-添加-RSS-订阅支持（可选的）" class="headerlink" title="1.3.15 添加 RSS 订阅支持（可选的）"></a>1.3.15 添加 RSS 订阅支持（可选的）</h4><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h4 id="1-3-16-添加-DaoVoice-在线聊天功能（可选的）"><a href="#1-3-16-添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="1.3.16 添加 DaoVoice 在线聊天功能（可选的）"></a>1.3.16 添加 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 在线聊天功能（可选的）</h4><p>前往 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h4 id="1-3-17-添加-Tidio-在线聊天功能（可选的）"><a href="#1-3-17-添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="1.3.17 添加 Tidio 在线聊天功能（可选的）"></a>1.3.17 添加 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能（可选的）</h4><p>前往 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h4 id="1-3-18-修改页脚"><a href="#1-3-18-修改页脚" class="headerlink" title="1.3.18 修改页脚"></a>1.3.18 修改页脚</h4><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h4 id="1-3-19-修改社交链接"><a href="#1-3-19-修改社交链接" class="headerlink" title="1.3.19 修改社交链接"></a>1.3.19 修改社交链接</h4><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.socialLink.github)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.socialLink.github %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h4 id="1-3-20-修改打赏的二维码图片"><a href="#1-3-20-修改打赏的二维码图片" class="headerlink" title="1.3.20 修改打赏的二维码图片"></a>1.3.20 修改打赏的二维码图片</h4><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h4 id="1-3-21-配置音乐播放器（可选的）"><a href="#1-3-21-配置音乐播放器（可选的）" class="headerlink" title="1.3.21 配置音乐播放器（可选的）"></a>1.3.21 配置音乐播放器（可选的）</h4><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 是否在首页显示音乐</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment" spellcheck="true"># require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment" spellcheck="true"># require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841     </span><span class="token comment" spellcheck="true"># require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false      </span><span class="token comment" spellcheck="true"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false   </span><span class="token comment" spellcheck="true"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7       </span><span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 列表默认折叠</span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h4 id="1-3-22-Front-matter-选项详解"><a href="#1-3-22-Front-matter-选项详解" class="headerlink" title="1.3.22  Front-matter 选项详解"></a>1.3.22  Front-matter 选项详解</h4><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><p>1.2 最简示例</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><p>1.3 最全示例</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><h2 id="2-Hexo-常用命令"><a href="#2-Hexo-常用命令" class="headerlink" title="2. Hexo 常用命令"></a>2. Hexo 常用命令</h2><h3 id="2-1-Create-a-new-post"><a href="#2-1-Create-a-new-post" class="headerlink" title="2.1 Create a new post"></a>2.1 Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="2-2-Run-server"><a href="#2-2-Run-server" class="headerlink" title="2.2 Run server"></a>2.2 Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="2-3-Generate-static-files"><a href="#2-3-Generate-static-files" class="headerlink" title="2.3 Generate static files"></a>2.3 Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="2-4-Deploy-to-remote-sites"><a href="#2-4-Deploy-to-remote-sites" class="headerlink" title="2.4 Deploy to remote sites"></a>2.4 Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo - Matery </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
